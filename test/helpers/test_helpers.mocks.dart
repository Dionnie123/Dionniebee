// Mocks generated by Mockito 5.4.4 from annotations
// in dionniebee/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i11;

import 'package:cloud_firestore/cloud_firestore.dart' as _i5;
import 'package:dionniebee/app/models/product_dto.dart' as _i13;
import 'package:dionniebee/app/models/user_dto.dart' as _i19;
import 'package:dionniebee/services/cart_service.dart' as _i14;
import 'package:dionniebee/services/fluttertoast/fluttertoast_service.dart'
    as _i20;
import 'package:dionniebee/services/foo_service.dart' as _i16;
import 'package:dionniebee/services/loader_overlay/loader_service.dart' as _i21;
import 'package:dionniebee/services/local_storage_service.dart' as _i17;
import 'package:dionniebee/services/order_service.dart' as _i15;
import 'package:dionniebee/services/product_service.dart' as _i12;
import 'package:dionniebee/services/user_service.dart' as _i18;
import 'package:faker/faker.dart' as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:flutter/material.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:stacked/stacked.dart' as _i2;
import 'package:stacked_firebase_auth/stacked_firebase_auth.dart' as _i4;
import 'package:stacked_services/stacked_services.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRootStackRouter_0 extends _i1.SmartFake
    implements _i2.RootStackRouter {
  _FakeRootStackRouter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteData_1 extends _i1.SmartFake implements _i2.RouteData {
  _FakeRouteData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingController_2 extends _i1.SmartFake
    implements _i2.RoutingController {
  _FakeRoutingController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuth_3 extends _i1.SmartFake implements _i3.FirebaseAuth {
  _FakeFirebaseAuth_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuthenticationResult_4 extends _i1.SmartFake
    implements _i4.FirebaseAuthenticationResult {
  _FakeFirebaseAuthenticationResult_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfirmationResult_5 extends _i1.SmartFake
    implements _i3.ConfirmationResult {
  _FakeConfirmationResult_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_6<T extends Object?> extends _i1.SmartFake
    implements _i5.CollectionReference<T> {
  _FakeCollectionReference_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFaker_7 extends _i1.SmartFake implements _i6.Faker {
  _FakeFaker_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i7.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  _i9.GlobalKey<_i9.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i9.GlobalKey<_i9.NavigatorState>?);

  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i7.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<T?>? navigateWithTransition<T>(
    _i9.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i9.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i7.Transition? transitionClass,
    _i7.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? replaceWithTransition<T>(
    _i9.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i9.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i7.Transition? transitionClass,
    _i7.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void popUntil(
    _i9.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i9.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? navigateToView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i9.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i7.Transition? transition,
    _i7.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i9.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearStackAndShowView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearTillFirstAndShowView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i9.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
}

/// A class which mocks [RouterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouterService extends _i1.Mock implements _i7.RouterService {
  @override
  _i2.RootStackRouter get router => (super.noSuchMethod(
        Invocation.getter(#router),
        returnValue: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
        returnValueForMissingStub: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
      ) as _i2.RootStackRouter);

  @override
  set router(_i2.RootStackRouter? _router) => super.noSuchMethod(
        Invocation.setter(
          #router,
          _router,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.StackedPage<dynamic>> get stack => (super.noSuchMethod(
        Invocation.getter(#stack),
        returnValue: <_i2.StackedPage<dynamic>>[],
        returnValueForMissingStub: <_i2.StackedPage<dynamic>>[],
      ) as List<_i2.StackedPage<dynamic>>);

  @override
  _i2.RouteData get topRoute => (super.noSuchMethod(
        Invocation.getter(#topRoute),
        returnValue: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
        returnValueForMissingStub: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
      ) as _i2.RouteData);

  @override
  dynamic setRouter(_i2.RootStackRouter? router) => super.noSuchMethod(
        Invocation.method(
          #setRouter,
          [router],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<dynamic> navigateTo(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<void> navigateToPath({
    required String? path,
    bool? includePrefixMatches = false,
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToPath,
          [],
          {
            #path: path,
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<T?> navigateWithTransition<T extends Object?>(
    _i9.Widget? widget, {
    _i9.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i10.Future<T?>.value(),
        returnValueForMissingStub: _i10.Future<T?>.value(),
      ) as _i10.Future<T?>);

  @override
  _i10.Future<T?> replaceWith<T extends Object?>(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i10.Future<T?>.value(),
        returnValueForMissingStub: _i10.Future<T?>.value(),
      ) as _i10.Future<T?>);

  @override
  _i10.Future<void> clearStackAndShow(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> clearStackAndShowView(
    _i9.Widget? widget, {
    _i9.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void popForced<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #popForced,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<bool> pop<T extends Object?>([T? result]) => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  void back<T extends Object?>({T? result}) => super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {#result: result},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #topMostRouter,
          [],
          {#ignorePagelessRoutes: ignorePagelessRoutes},
        ),
        returnValue: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
      ) as _i2.RoutingController);

  @override
  _i10.Future<T?> pushNativeRoute<T extends Object?>(_i9.Route<T>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNativeRoute,
          [route],
        ),
        returnValue: _i10.Future<T?>.value(),
        returnValueForMissingStub: _i10.Future<T?>.value(),
      ) as _i10.Future<T?>);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i7.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i7.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<_i7.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i10.Future<_i7.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.SheetResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.SheetResponse<dynamic>?>);

  @override
  _i10.Future<_i7.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i11.Color? barrierColor = const _i11.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i10.Future<_i7.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i10.Future<_i7.SheetResponse<T>?>.value(),
      ) as _i10.Future<_i7.SheetResponse<T>?>);

  @override
  void completeSheet(_i7.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i7.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i7.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i9.Widget Function(
      _i9.BuildContext,
      _i7.DialogRequest<dynamic>,
      dynamic Function(_i7.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<_i7.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i11.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i11.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i7.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<dynamic>?>);

  @override
  _i10.Future<_i7.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i11.Color? barrierColor = const _i11.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i10.Future<_i7.DialogResponse<T>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<T>?>);

  @override
  _i10.Future<_i7.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i11.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i11.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i7.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i7.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FirebaseAuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthenticationService extends _i1.Mock
    implements _i4.FirebaseAuthenticationService {
  @override
  _i3.FirebaseAuth get firebaseAuth => (super.noSuchMethod(
        Invocation.getter(#firebaseAuth),
        returnValue: _FakeFirebaseAuth_3(
          this,
          Invocation.getter(#firebaseAuth),
        ),
        returnValueForMissingStub: _FakeFirebaseAuth_3(
          this,
          Invocation.getter(#firebaseAuth),
        ),
      ) as _i3.FirebaseAuth);

  @override
  bool get hasUser => (super.noSuchMethod(
        Invocation.getter(#hasUser),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Stream<_i3.User?> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i10.Stream<_i3.User?>.empty(),
        returnValueForMissingStub: _i10.Stream<_i3.User?>.empty(),
      ) as _i10.Stream<_i3.User?>);

  @override
  _i10.Future<bool> emailExists(String? email) => (super.noSuchMethod(
        Invocation.method(
          #emailExists,
          [email],
        ),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  _i10.Future<_i4.FirebaseAuthenticationResult> signInWithGoogle(
          {String? webLoginHint}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
          {#webLoginHint: webLoginHint},
        ),
        returnValue: _i10.Future<_i4.FirebaseAuthenticationResult>.value(
            _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
            {#webLoginHint: webLoginHint},
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.FirebaseAuthenticationResult>.value(
                _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
            {#webLoginHint: webLoginHint},
          ),
        )),
      ) as _i10.Future<_i4.FirebaseAuthenticationResult>);

  @override
  _i10.Future<_i4.FirebaseAuthenticationResult> signInWithFacebook(
          {String? webLoginHint}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithFacebook,
          [],
          {#webLoginHint: webLoginHint},
        ),
        returnValue: _i10.Future<_i4.FirebaseAuthenticationResult>.value(
            _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #signInWithFacebook,
            [],
            {#webLoginHint: webLoginHint},
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.FirebaseAuthenticationResult>.value(
                _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #signInWithFacebook,
            [],
            {#webLoginHint: webLoginHint},
          ),
        )),
      ) as _i10.Future<_i4.FirebaseAuthenticationResult>);

  @override
  _i10.Future<bool> isAppleSignInAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isAppleSignInAvailable,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);

  @override
  _i10.Future<_i4.FirebaseAuthenticationResult> signInWithApple({
    required String? appleRedirectUri,
    required String? appleClientId,
    bool? askForFullName = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithApple,
          [],
          {
            #appleRedirectUri: appleRedirectUri,
            #appleClientId: appleClientId,
            #askForFullName: askForFullName,
          },
        ),
        returnValue: _i10.Future<_i4.FirebaseAuthenticationResult>.value(
            _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #signInWithApple,
            [],
            {
              #appleRedirectUri: appleRedirectUri,
              #appleClientId: appleClientId,
              #askForFullName: askForFullName,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.FirebaseAuthenticationResult>.value(
                _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #signInWithApple,
            [],
            {
              #appleRedirectUri: appleRedirectUri,
              #appleClientId: appleClientId,
              #askForFullName: askForFullName,
            },
          ),
        )),
      ) as _i10.Future<_i4.FirebaseAuthenticationResult>);

  @override
  _i10.Future<_i4.FirebaseAuthenticationResult> loginAnonymously() =>
      (super.noSuchMethod(
        Invocation.method(
          #loginAnonymously,
          [],
        ),
        returnValue: _i10.Future<_i4.FirebaseAuthenticationResult>.value(
            _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #loginAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.FirebaseAuthenticationResult>.value(
                _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #loginAnonymously,
            [],
          ),
        )),
      ) as _i10.Future<_i4.FirebaseAuthenticationResult>);

  @override
  _i10.Future<_i4.FirebaseAuthenticationResult> loginWithEmail({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithEmail,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i10.Future<_i4.FirebaseAuthenticationResult>.value(
            _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #loginWithEmail,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.FirebaseAuthenticationResult>.value(
                _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #loginWithEmail,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i10.Future<_i4.FirebaseAuthenticationResult>);

  @override
  _i10.Future<_i4.FirebaseAuthenticationResult> createAccountWithEmail({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccountWithEmail,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i10.Future<_i4.FirebaseAuthenticationResult>.value(
            _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #createAccountWithEmail,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.FirebaseAuthenticationResult>.value(
                _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #createAccountWithEmail,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i10.Future<_i4.FirebaseAuthenticationResult>);

  @override
  _i10.Future<_i3.ConfirmationResult> signInWithPhoneNumber(
          String? phoneNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPhoneNumber,
          [phoneNumber],
        ),
        returnValue:
            _i10.Future<_i3.ConfirmationResult>.value(_FakeConfirmationResult_5(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [phoneNumber],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.ConfirmationResult>.value(_FakeConfirmationResult_5(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [phoneNumber],
          ),
        )),
      ) as _i10.Future<_i3.ConfirmationResult>);

  @override
  _i10.Future<_i4.FirebaseAuthenticationResult> verifyOtp(
    _i3.ConfirmationResult? confirmationResult,
    String? otp,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOtp,
          [
            confirmationResult,
            otp,
          ],
        ),
        returnValue: _i10.Future<_i4.FirebaseAuthenticationResult>.value(
            _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #verifyOtp,
            [
              confirmationResult,
              otp,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.FirebaseAuthenticationResult>.value(
                _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #verifyOtp,
            [
              confirmationResult,
              otp,
            ],
          ),
        )),
      ) as _i10.Future<_i4.FirebaseAuthenticationResult>);

  @override
  _i10.Future<void> requestVerificationCode({
    required String? phoneNumber,
    void Function(_i4.FirebaseAuthenticationResult)? onVerificationCompleted,
    void Function(_i3.FirebaseAuthException)? onVerificationFailed,
    void Function(String)? onCodeSent,
    void Function(String)? onCodeTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestVerificationCode,
          [],
          {
            #phoneNumber: phoneNumber,
            #onVerificationCompleted: onVerificationCompleted,
            #onVerificationFailed: onVerificationFailed,
            #onCodeSent: onCodeSent,
            #onCodeTimeout: onCodeTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<_i4.FirebaseAuthenticationResult> authenticateWithOtp(
          String? otp) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticateWithOtp,
          [otp],
        ),
        returnValue: _i10.Future<_i4.FirebaseAuthenticationResult>.value(
            _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #authenticateWithOtp,
            [otp],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.FirebaseAuthenticationResult>.value(
                _FakeFirebaseAuthenticationResult_4(
          this,
          Invocation.method(
            #authenticateWithOtp,
            [otp],
          ),
        )),
      ) as _i10.Future<_i4.FirebaseAuthenticationResult>);

  @override
  _i10.Future<dynamic> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<dynamic> sendResetPasswordLink(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendResetPasswordLink,
          [email],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<dynamic> validatePassword(String? password) =>
      (super.noSuchMethod(
        Invocation.method(
          #validatePassword,
          [password],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<dynamic> updatePassword(String? password) => (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [password],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<dynamic> updateEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #updateEmail,
          [email],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<dynamic> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDisplayName,
          [displayName],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<dynamic> updatePhotoURL(String? photoUrl) => (super.noSuchMethod(
        Invocation.method(
          #updatePhotoURL,
          [photoUrl],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  String generateNonce([int? length = 32]) => (super.noSuchMethod(
        Invocation.method(
          #generateNonce,
          [length],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #generateNonce,
            [length],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #generateNonce,
            [length],
          ),
        ),
      ) as String);

  @override
  String sha256ofString(String? input) => (super.noSuchMethod(
        Invocation.method(
          #sha256ofString,
          [input],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #sha256ofString,
            [input],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #sha256ofString,
            [input],
          ),
        ),
      ) as String);
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i12.ProductService {
  @override
  _i5.CollectionReference<_i13.ProductDto> get collectionReference =>
      (super.noSuchMethod(
        Invocation.getter(#collectionReference),
        returnValue: _FakeCollectionReference_6<_i13.ProductDto>(
          this,
          Invocation.getter(#collectionReference),
        ),
        returnValueForMissingStub: _FakeCollectionReference_6<_i13.ProductDto>(
          this,
          Invocation.getter(#collectionReference),
        ),
      ) as _i5.CollectionReference<_i13.ProductDto>);

  @override
  List<_i13.ProductDto> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: <_i13.ProductDto>[],
        returnValueForMissingStub: <_i13.ProductDto>[],
      ) as List<_i13.ProductDto>);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i10.Future<dynamic> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<_i13.ProductDto?> find(String? id) => (super.noSuchMethod(
        Invocation.method(
          #find,
          [id],
        ),
        returnValue: _i10.Future<_i13.ProductDto?>.value(),
        returnValueForMissingStub: _i10.Future<_i13.ProductDto?>.value(),
      ) as _i10.Future<_i13.ProductDto?>);

  @override
  _i10.Future<void> addItem(_i13.ProductDto? product) => (super.noSuchMethod(
        Invocation.method(
          #addItem,
          [product],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> updateItem(_i13.ProductDto? product) => (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [product],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> deleteItem(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [id],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CartService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartService extends _i1.Mock implements _i14.CartService {
  @override
  _i5.CollectionReference<Object?> get collectionReference =>
      (super.noSuchMethod(
        Invocation.getter(#collectionReference),
        returnValue: _FakeCollectionReference_6<Object?>(
          this,
          Invocation.getter(#collectionReference),
        ),
        returnValueForMissingStub: _FakeCollectionReference_6<Object?>(
          this,
          Invocation.getter(#collectionReference),
        ),
      ) as _i5.CollectionReference<Object?>);

  @override
  _i6.Faker get faker => (super.noSuchMethod(
        Invocation.getter(#faker),
        returnValue: _FakeFaker_7(
          this,
          Invocation.getter(#faker),
        ),
        returnValueForMissingStub: _FakeFaker_7(
          this,
          Invocation.getter(#faker),
        ),
      ) as _i6.Faker);

  @override
  set faker(_i6.Faker? _faker) => super.noSuchMethod(
        Invocation.setter(
          #faker,
          _faker,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i13.ProductDto> get cart => (super.noSuchMethod(
        Invocation.getter(#cart),
        returnValue: <_i13.ProductDto>[],
        returnValueForMissingStub: <_i13.ProductDto>[],
      ) as List<_i13.ProductDto>);

  @override
  num get cartTotal => (super.noSuchMethod(
        Invocation.getter(#cartTotal),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);

  @override
  num get cartCount => (super.noSuchMethod(
        Invocation.getter(#cartCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i10.Future<void> addOrder() => (super.noSuchMethod(
        Invocation.method(
          #addOrder,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  dynamic addToCart(_i13.ProductDto? product) => super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [product],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic deleteFromCart(String? id) => super.noSuchMethod(
        Invocation.method(
          #deleteFromCart,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic toggleSelectCartItem(String? id) => super.noSuchMethod(
        Invocation.method(
          #toggleSelectCartItem,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic addCartItemQuantity(String? id) => super.noSuchMethod(
        Invocation.method(
          #addCartItemQuantity,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic minusCartItemQuantity(String? id) => super.noSuchMethod(
        Invocation.method(
          #minusCartItemQuantity,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OrderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderService extends _i1.Mock implements _i15.OrderService {
  @override
  _i5.CollectionReference<Object?> get collectionReference =>
      (super.noSuchMethod(
        Invocation.getter(#collectionReference),
        returnValue: _FakeCollectionReference_6<Object?>(
          this,
          Invocation.getter(#collectionReference),
        ),
        returnValueForMissingStub: _FakeCollectionReference_6<Object?>(
          this,
          Invocation.getter(#collectionReference),
        ),
      ) as _i5.CollectionReference<Object?>);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FooService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFooService extends _i1.Mock implements _i16.FooService {
  @override
  set whoAmI(String? val) => super.noSuchMethod(
        Invocation.setter(
          #whoAmI,
          val,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i10.Future<dynamic> sendHttp(String? val) => (super.noSuchMethod(
        Invocation.method(
          #sendHttp,
          [val],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i17.LocalStorageService {
  @override
  bool get enableLogs => (super.noSuchMethod(
        Invocation.getter(#enableLogs),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);

  @override
  Object? getFromDisk(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getFromDisk,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as Object?);

  @override
  void saveToDisk(
    String? key,
    dynamic content,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #saveToDisk,
          [
            key,
            content,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i18.UserService {
  @override
  set currentUser(_i19.UserDto? value) => super.noSuchMethod(
        Invocation.setter(
          #currentUser,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasLoggedInUser => (super.noSuchMethod(
        Invocation.getter(#hasLoggedInUser),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlutterToastService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterToastService extends _i1.Mock
    implements _i20.FlutterToastService {
  @override
  set welcomeToast(_i20.ToastBuilder? _welcomeToast) => super.noSuchMethod(
        Invocation.setter(
          #welcomeToast,
          _welcomeToast,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Function get clear => (super.noSuchMethod(
        Invocation.getter(#clear),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as Function);

  @override
  set clear(Function? _clear) => super.noSuchMethod(
        Invocation.setter(
          #clear,
          _clear,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set showToast(dynamic Function(String?)? _showToast) => super.noSuchMethod(
        Invocation.setter(
          #showToast,
          _showToast,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomToastBuilders(
          Map<_i20.ToastType, _i20.ToastBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomToastBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic welcome(_i20.ToastType? type) => super.noSuchMethod(
        Invocation.method(
          #welcome,
          [type],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic show(String? message) => super.noSuchMethod(
        Invocation.method(
          #show,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoaderOverlayService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoaderOverlayService extends _i1.Mock
    implements _i21.LoaderOverlayService {
  @override
  set hideLoaderOverlay(_i21.LoaderOverlayBuilder? _hideLoaderOverlay) =>
      super.noSuchMethod(
        Invocation.setter(
          #hideLoaderOverlay,
          _hideLoaderOverlay,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomLoaderOverlayBuilders(
          Map<_i21.LoaderOverlayType, _i21.LoaderOverlayBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomLoaderOverlayBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic show(_i21.LoaderOverlayType? type) => super.noSuchMethod(
        Invocation.method(
          #show,
          [type],
        ),
        returnValueForMissingStub: null,
      );
}
